import React from 'react';
import Select, {
  components,
  createFilter,
  OptionProps,
  ValueType
} from 'react-select';
import { isArray, isObject } from '../utils/jsUtils';

/*
 * Wrap the option generated by react-select and adds utility properties
 * */
const CustomOption: React.FC<OptionProps<Option>> = props => {
  return (
    <div
      title={props.data.description || ''}
      data-test={`data_test_column_type_value_${props.data.value}`}
    >
      <components.Option {...props} />
    </div>
  );
};

/*
 * Searchable select box component
 *  1) options: Accepts options
 *  2) value: selectedValue
 *  3) onChange: function to call on change of value
 *  4) bsClass: Wrapper class
 *  5) customStyle: Custom style
 * */
type Option = { value: string | number; label: string | number };
type Props = {
  options: Option[] | any[] | Array<Record<PropertyKey, any>>;
  onChange: (value: ValueType<Option>) => void;
  value: Option | any;
  bsClass: string;
  styleOverrides: Record<PropertyKey, any>;
  placeholder: string;
  filterOption: 'prefix' | 'fulltext';
  onInputChange?: (v: string) => void;
};
const SearchableSelectBox: React.FC<Props> = ({
  options,
  onChange,
  value,
  bsClass,
  styleOverrides,
  placeholder,
  filterOption,
  onInputChange
}) => {
  /* Select element style customization */

  const customStyles: Record<string, any> = {};
  if (styleOverrides) {
    Object.keys(styleOverrides).forEach(comp => {
      customStyles[comp] = (provided: object) => ({
        ...provided,
        ...styleOverrides[comp]
      });
    });
  }

  let customFilter;
  switch (filterOption) {
    case 'prefix':
      customFilter = createFilter({ matchFrom: 'start' });
      break;
    case 'fulltext':
      customFilter = createFilter({ matchFrom: 'any' });
      break;
    default:
      customFilter = null;
  }

  // handle simple options
  if (isArray(options) && !isObject(options[0])) {
    options = (options as Array<Option>).map(op => {
      return { value: op, label: op };
    });
  }

  if (value && !isObject(value)) {
    value = { value: value, label: value };
  }

  return (
    <Select
      isSearchable
      components={{ Option: CustomOption }}
      classNamePrefix={`${bsClass}`}
      placeholder={placeholder}
      options={options as Option[]}
      onChange={onChange}
      value={value}
      styles={customStyles}
      filterOption={customFilter}
      onInputChange={onInputChange}
    />
  );
};

export default SearchableSelectBox;
